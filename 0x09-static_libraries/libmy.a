!<arch>
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

0-isupper.o/    0           0     0     644     228       `
#include "main.h"

/**
 * _isupper - Checks for uppercase character
 * @c: The character to check
 *
 * Return: 1 if c is uppercase. 0 otherwise
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);

	return (0);
}
0-memset.o/     0           0     0     644     311       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte.
 * @s: memory area
 * @b: constant byte
 * @n: number of bytes to fill
 *
 * Return: a pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;

	return (s);
}

0-strcat.o/     0           0     0     644     415       `
#include "main.h"

/**
 * _strcat - Concatenates two strings
 * @dest: Destination string
 * @src: Source string
 *
 * Return: A pointer to the resulting string dest
 */
char *_strcat(char *dest, char *src)
{
	int destLen = 0;
	int srcLen = 0;

	while (dest[destLen] != '\0')
		destLen++;

	while (src[srcLen])
	{
		dest[destLen] = src[srcLen];
		srcLen++;
		destLen++;
	}
	dest[destLen] = '\0';

	return (dest);
}

1-isdigit.o/    0           0     0     644     228       `
#include "main.h"

/**
 * _isdigit - Checks for a digit (0 through 9)
 * @c: The character to check
 *
 * Return: 1 if c is a digit. 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);

	return (0);
}
1-memcpy.o/     0           0     0     644     338       `
#include "main.h"

/**
 * _memcpy -  copies n bytes from memory area src
 * to memory area dest
 * @dest: destination
 * @src: source
 * @n: number of bytes to copy
 *
 * Return: a pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];

	return (dest);
}
1-strncat.o/    0           0     0     644     444       `
#include "main.h"

/**
 * _strncat - Concatenates two strings.
 * @dest: Destination string
 * @src: Source string
 * @n: Number of bytes to use from src
 *
 * Return: A pointer to the resulting string dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int destLen, i;

	for (destLen = 0; dest[destLen] != '\0'; destLen++)
		;

	for (i = 0; src[i] != '\0' && n > 0; i++, n--, destLen++)
	{
		dest[destLen] = src[i];
	}

	return (dest);
}
100-atoi.o/     0           0     0     644     565       `
#include "main.h"

/**
 * _atoi - Converts a string to an integer
 * @s: The string
 *
 * Return: The converted integer
 */
int _atoi(char *s)
{
	int i, value, sign;
	char c;

	i = 0;
	value = 0;
	sign = -1;
	while (s[i] != '\0')
	{
		c = s[i];
		if (c == '-')
			sign *= -1;
		else if (c >= '0' && c <= '9')
		{
			if (value < 0)
				value = value * 10 - (c - '0');
			else
				value = (c - '0') * -1;

			/* Make sure the next char is a number */
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
		}
		i++;
	}
	if (sign < 0)
		value *= -1;

	return (value);
}

2-strchr.o/     0           0     0     644     420       `
#include "main.h"
#include <stdio.h>

/**
 * _strchr - locates a character in a string.
 * @s: the string
 * @c: the character
 *
 * Return: a pointer to the first occurrence of the
 * character c in the string s,
 * or NULL if the character is not found
 */
char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
			return (s);
		else if (*(s + 1) == c)
			return (s + 1);
		s++;
	}

	return (s + 1);
}
2-strlen.o/     0           0     0     644     209       `
#include "main.h"

/**
 * _strlen - Returns the length of a string
 * @s: The string
 *
 * Return: The length of the string
 */
int _strlen(char *s)
{
	int len = 0;

	while (s[len])
		len++;

	return (len);
}

2-strncpy.o/    0           0     0     644     348       `
#include "main.h"

/**
 * _strncpy - Copies a string.
 * @dest: Destination string
 * @src: Source string
 * @n: Number of bytes to copy
 *
 * Return: Pointer to dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; src[i] != '\0' && i < n; i++)
		dest[i] = src[i];

	for (; n > i; i++)
		dest[i] = '\0';

	return (dest);
}
3-islower.o/    0           0     0     644     239       `
#include "main.h"

/**
 * _islower - Checks for lowercase character
 * @c: The character to be checked
 *
 * Return: 1 if c is lowercase, otherwise 0
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

3-puts.o/       0           0     0     644     214       `
#include "main.h"

/**
 * _puts - Prints a string, followed by a new line, to stdout
 * @str: The string
 */
void _puts(char *str)
{
	int i = 0;

	while (str[i])
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}
3-strcmp.o/     0           0     0     644     351       `
#include "main.h"

/**
 * _strcmp - Compares two strings.
 * @s1: First string
 * @s2: Second string
 *
 * Return: 0 if similar, positive number if s1 > s2, otherwise negative number
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
			return (s1[i] - s2[i]);
	}

	return (0);
}

3-strspn.o/     0           0     0     644     507       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring.
 * @s: the string
 * @accept: prefix
 *
 * Return: the number of bytes in the initial segment of s
 * which consist only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int length = 0;
	int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				length++;
				break;
			}
		}

		if (accept[j] == '\0')
			break;
	}

	return (length);
}

4-isalpha.o/    0           0     0     644     288       `
#include "main.h"

/**
 * _isalpha - Checks for alphabetic character
 * @c: The character to check
 *
 * Return: 1 if c is a letter, lowercase or uppercase. 0 otherwise
 */
int _isalpha(int c)
{
	if ((c >= 'A' && c <= 'Z') ||
		(c >= 'a' && c <= 'z'))
		return (1);
	else
		return (0);
}
4-strpbrk.o/    0           0     0     644     469       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk - searches a string for any of a set of bytes.
 * @s: the string
 * @accept: a set of bytes
 *
 * Return: a pointer to the byte in s that matches one of the bytes
 * in accept, or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
				return (&s[i]);
		}
	}

	return (NULL);
}

5-strstr.o/     0           0     0     644     646       `
#include "main.h"

/**
 * _strstr - locates a substring.
 * @haystack: source string
 * @needle: the substring
 *
 * Return: a pointer to the beginning of the located substring,
 * or NULL if the substring is not found.
 */
char *_strstr(char *haystack, char *needle)
{
	int i, j, k;
	char *resultInitial;

	for (i = 0, k = 0; haystack[i] != '\0'; i++, j++)
	{
		resultInitial = &haystack[i];
		j = 0;
		while (needle[j + k] != '\0' && haystack[i + k] != '\0'
				&& needle[j + k] == haystack[i + k])
		{
			if (haystack[i + k] != needle[j + k])
				break;
			k++;
		}

		if (needle[j + k] == '\0')
			return (resultInitial);

	}

	return (0);
}
6-abs.o/        0           0     0     644     202       `
#include "main.h"

/**
 * _abs - Computes the absolute value of an integer
 * @i: The integer to compute with
 *
 * Return: The absolute value of i
 */
int _abs(int i)
{
	return (i < 0 ? i * -1 : i);
}
9-strcpy.o/     0           0     0     644     387       `
#include "main.h"

/**
 * _strcpy - Copies the string pointed to by src,
 * including the terminating null byte (\0),
 * to the buffer pointed to by dest
 * @dest: The destination
 * @src: The source
 *
 * Return: The pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int len = 0;

	while (src[len])
	{
		dest[len] = src[len];
		len++;
	}
	dest[len] = '\0';

	return (dest);
}

